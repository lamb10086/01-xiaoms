import type { App } from 'vue';
export declare const Dialog: {
    (options: import("vant").DialogOptions): Promise<unknown>;
    Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
        show: BooleanConstructor;
        zIndex: (NumberConstructor | StringConstructor)[];
        overlay: {
            type: BooleanConstructor;
            default: true;
        };
        duration: (NumberConstructor | StringConstructor)[];
        teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
        lockScroll: {
            type: BooleanConstructor;
            default: true;
        };
        lazyRender: {
            type: BooleanConstructor;
            default: true;
        };
        beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
        overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
        overlayClass: import("vue").PropType<unknown>;
        transitionAppear: BooleanConstructor;
        closeOnClickOverlay: {
            type: BooleanConstructor;
            default: true;
        };
    } & {
        title: StringConstructor;
        theme: import("vue").PropType<import("vant").DialogTheme>;
        width: (NumberConstructor | StringConstructor)[];
        message: import("vue").PropType<import("vant").DialogMessage>;
        callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
        allowHtml: BooleanConstructor;
        className: import("vue").PropType<unknown>;
        transition: {
            type: import("vue").PropType<string>;
            default: string;
        };
        messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
        closeOnPopstate: {
            type: BooleanConstructor;
            default: true;
        };
        showCancelButton: BooleanConstructor;
        cancelButtonText: StringConstructor;
        cancelButtonColor: StringConstructor;
        cancelButtonDisabled: BooleanConstructor;
        confirmButtonText: StringConstructor;
        confirmButtonColor: StringConstructor;
        confirmButtonDisabled: BooleanConstructor;
        showConfirmButton: {
            type: BooleanConstructor;
            default: true;
        };
        closeOnClickOverlay: BooleanConstructor;
    }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("keydown" | "update:show" | "cancel" | "confirm")[], "keydown" | "update:show" | "cancel" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        show: BooleanConstructor;
        zIndex: (NumberConstructor | StringConstructor)[];
        overlay: {
            type: BooleanConstructor;
            default: true;
        };
        duration: (NumberConstructor | StringConstructor)[];
        teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
        lockScroll: {
            type: BooleanConstructor;
            default: true;
        };
        lazyRender: {
            type: BooleanConstructor;
            default: true;
        };
        beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
        overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
        overlayClass: import("vue").PropType<unknown>;
        transitionAppear: BooleanConstructor;
        closeOnClickOverlay: {
            type: BooleanConstructor;
            default: true;
        };
    } & {
        title: StringConstructor;
        theme: import("vue").PropType<import("vant").DialogTheme>;
        width: (NumberConstructor | StringConstructor)[];
        message: import("vue").PropType<import("vant").DialogMessage>;
        callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
        allowHtml: BooleanConstructor;
        className: import("vue").PropType<unknown>;
        transition: {
            type: import("vue").PropType<string>;
            default: string;
        };
        messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
        closeOnPopstate: {
            type: BooleanConstructor;
            default: true;
        };
        showCancelButton: BooleanConstructor;
        cancelButtonText: StringConstructor;
        cancelButtonColor: StringConstructor;
        cancelButtonDisabled: BooleanConstructor;
        confirmButtonText: StringConstructor;
        confirmButtonColor: StringConstructor;
        confirmButtonDisabled: BooleanConstructor;
        showConfirmButton: {
            type: BooleanConstructor;
            default: true;
        };
        closeOnClickOverlay: BooleanConstructor;
    }>> & {
        onKeydown?: ((...args: any[]) => any) | undefined;
        "onUpdate:show"?: ((...args: any[]) => any) | undefined;
        onCancel?: ((...args: any[]) => any) | undefined;
        onConfirm?: ((...args: any[]) => any) | undefined;
    }, {
        overlay: boolean;
        show: boolean;
        lockScroll: boolean;
        lazyRender: boolean;
        transitionAppear: boolean;
        closeOnClickOverlay: boolean;
        transition: string;
        closeOnPopstate: boolean;
        allowHtml: boolean;
        showCancelButton: boolean;
        cancelButtonDisabled: boolean;
        confirmButtonDisabled: boolean;
        showConfirmButton: boolean;
    }>>;
    alert: any;
    config: (options: import("vant").DialogOptions) => Promise<unknown>;
    close: () => void;
    setDefaultOptions: (options: import("vant").DialogOptions) => void;
    resetDefaultOptions: () => void;
    install(app: App): void;
};
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        $dialog: typeof Dialog;
    }
}
