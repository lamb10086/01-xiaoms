import { setToastDefaultOptions } from 'vant';
import type { App } from 'vue';
export declare const Toast: {
    (options?: string | import("vant").ToastOptions | undefined): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            message: import("packages/vant/lib/utils").Numeric;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        message: import("packages/vant/lib/utils").Numeric;
        close: () => void;
        open: (props: Record<string, any>) => void;
        $route: import("vue-router").RouteLocationNormalizedLoaded;
        $router: import("vue-router").Router;
        $Lazyload: {
            $on: (event: string, handler: import("packages/vant/lib/lazyload/vue-lazyload").Callback) => void;
            $off: (event: string, handler?: import("packages/vant/lib/lazyload/vue-lazyload").Callback | undefined) => void;
            $once: (event: string, handler: import("packages/vant/lib/lazyload/vue-lazyload").Callback) => void;
        };
        $dialog: {
            (options: import("vant").DialogOptions): Promise<unknown>;
            Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                title: StringConstructor;
                theme: import("vue").PropType<import("vant").DialogTheme>;
                width: (NumberConstructor | StringConstructor)[];
                message: import("vue").PropType<import("vant").DialogMessage>;
                callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
                allowHtml: BooleanConstructor;
                className: import("vue").PropType<unknown>;
                transition: {
                    type: import("vue").PropType<string>;
                    default: string;
                };
                messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
                closeOnPopstate: {
                    type: BooleanConstructor;
                    default: true;
                };
                showCancelButton: BooleanConstructor;
                cancelButtonText: StringConstructor;
                cancelButtonColor: StringConstructor;
                cancelButtonDisabled: BooleanConstructor;
                confirmButtonText: StringConstructor;
                confirmButtonColor: StringConstructor;
                confirmButtonDisabled: BooleanConstructor;
                showConfirmButton: {
                    type: BooleanConstructor;
                    default: true;
                };
                closeOnClickOverlay: BooleanConstructor;
            }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("keydown" | "update:show" | "cancel" | "confirm")[], "keydown" | "update:show" | "cancel" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                title: StringConstructor;
                theme: import("vue").PropType<import("vant").DialogTheme>;
                width: (NumberConstructor | StringConstructor)[];
                message: import("vue").PropType<import("vant").DialogMessage>;
                callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
                allowHtml: BooleanConstructor;
                className: import("vue").PropType<unknown>;
                transition: {
                    type: import("vue").PropType<string>;
                    default: string;
                };
                messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
                closeOnPopstate: {
                    type: BooleanConstructor;
                    default: true;
                };
                showCancelButton: BooleanConstructor;
                cancelButtonText: StringConstructor;
                cancelButtonColor: StringConstructor;
                cancelButtonDisabled: BooleanConstructor;
                confirmButtonText: StringConstructor;
                confirmButtonColor: StringConstructor;
                confirmButtonDisabled: BooleanConstructor;
                showConfirmButton: {
                    type: BooleanConstructor;
                    default: true;
                };
                closeOnClickOverlay: BooleanConstructor;
            }>> & {
                onKeydown?: ((...args: any[]) => any) | undefined;
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                onCancel?: ((...args: any[]) => any) | undefined;
                onConfirm?: ((...args: any[]) => any) | undefined;
            }, {
                overlay: boolean;
                show: boolean;
                lockScroll: boolean;
                lazyRender: boolean;
                transitionAppear: boolean;
                closeOnClickOverlay: boolean;
                transition: string;
                closeOnPopstate: boolean;
                allowHtml: boolean;
                showCancelButton: boolean;
                cancelButtonDisabled: boolean;
                confirmButtonDisabled: boolean;
                showConfirmButton: boolean;
            }>>;
            alert: any;
            config: (options: import("vant").DialogOptions) => Promise<unknown>;
            close: () => void;
            setDefaultOptions: (options: import("vant").DialogOptions) => void;
            resetDefaultOptions: () => void;
            install(app: App<any>): void;
        };
        $toast: typeof Toast;
        $notify: {
            (options: import("packages/vant/lib/utils").Numeric | import("vant").NotifyOptions): import("packages/vant/lib/utils").ComponentInstance | undefined;
            clear: () => void;
            Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                type: {
                    type: import("vue").PropType<import("vant").NotifyType>;
                    default: import("vant").NotifyType;
                };
                color: StringConstructor;
                message: (NumberConstructor | StringConstructor)[];
                position: {
                    type: import("vue").PropType<import("packages/vant/lib/notify/types").NotifyPosition>;
                    default: import("packages/vant/lib/notify/types").NotifyPosition;
                };
                className: import("vue").PropType<unknown>;
                background: StringConstructor;
                lockScroll: BooleanConstructor;
            }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:show"[], "update:show", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                type: {
                    type: import("vue").PropType<import("vant").NotifyType>;
                    default: import("vant").NotifyType;
                };
                color: StringConstructor;
                message: (NumberConstructor | StringConstructor)[];
                position: {
                    type: import("vue").PropType<import("packages/vant/lib/notify/types").NotifyPosition>;
                    default: import("packages/vant/lib/notify/types").NotifyPosition;
                };
                className: import("vue").PropType<unknown>;
                background: StringConstructor;
                lockScroll: BooleanConstructor;
            }>> & {
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            }, {
                type: import("vant").NotifyType;
                position: import("packages/vant/lib/notify/types").NotifyPosition;
                overlay: boolean;
                show: boolean;
                lockScroll: boolean;
                lazyRender: boolean;
                transitionAppear: boolean;
                closeOnClickOverlay: boolean;
            }>>;
            setDefaultOptions: (options: import("vant").NotifyOptions) => import("vant").NotifyOptions;
            resetDefaultOptions: () => void;
            install(app: App<any>): void;
        };
        clear: () => void;
    };
    fail(options: string | import("vant").ToastOptions): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            message: import("packages/vant/lib/utils").Numeric;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        message: import("packages/vant/lib/utils").Numeric;
        close: () => void;
        open: (props: Record<string, any>) => void;
        $route: import("vue-router").RouteLocationNormalizedLoaded;
        $router: import("vue-router").Router;
        $Lazyload: {
            $on: (event: string, handler: import("packages/vant/lib/lazyload/vue-lazyload").Callback) => void;
            $off: (event: string, handler?: import("packages/vant/lib/lazyload/vue-lazyload").Callback | undefined) => void;
            $once: (event: string, handler: import("packages/vant/lib/lazyload/vue-lazyload").Callback) => void;
        };
        $dialog: {
            (options: import("vant").DialogOptions): Promise<unknown>;
            Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                title: StringConstructor;
                theme: import("vue").PropType<import("vant").DialogTheme>;
                width: (NumberConstructor | StringConstructor)[];
                message: import("vue").PropType<import("vant").DialogMessage>;
                callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
                allowHtml: BooleanConstructor;
                className: import("vue").PropType<unknown>;
                transition: {
                    type: import("vue").PropType<string>;
                    default: string;
                };
                messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
                closeOnPopstate: {
                    type: BooleanConstructor;
                    default: true;
                };
                showCancelButton: BooleanConstructor;
                cancelButtonText: StringConstructor;
                cancelButtonColor: StringConstructor;
                cancelButtonDisabled: BooleanConstructor;
                confirmButtonText: StringConstructor;
                confirmButtonColor: StringConstructor;
                confirmButtonDisabled: BooleanConstructor;
                showConfirmButton: {
                    type: BooleanConstructor;
                    default: true;
                };
                closeOnClickOverlay: BooleanConstructor;
            }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("keydown" | "update:show" | "cancel" | "confirm")[], "keydown" | "update:show" | "cancel" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                title: StringConstructor;
                theme: import("vue").PropType<import("vant").DialogTheme>;
                width: (NumberConstructor | StringConstructor)[];
                message: import("vue").PropType<import("vant").DialogMessage>;
                callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
                allowHtml: BooleanConstructor;
                className: import("vue").PropType<unknown>;
                transition: {
                    type: import("vue").PropType<string>;
                    default: string;
                };
                messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
                closeOnPopstate: {
                    type: BooleanConstructor;
                    default: true;
                };
                showCancelButton: BooleanConstructor;
                cancelButtonText: StringConstructor;
                cancelButtonColor: StringConstructor;
                cancelButtonDisabled: BooleanConstructor;
                confirmButtonText: StringConstructor;
                confirmButtonColor: StringConstructor;
                confirmButtonDisabled: BooleanConstructor;
                showConfirmButton: {
                    type: BooleanConstructor;
                    default: true;
                };
                closeOnClickOverlay: BooleanConstructor;
            }>> & {
                onKeydown?: ((...args: any[]) => any) | undefined;
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                onCancel?: ((...args: any[]) => any) | undefined;
                onConfirm?: ((...args: any[]) => any) | undefined;
            }, {
                overlay: boolean;
                show: boolean;
                lockScroll: boolean;
                lazyRender: boolean;
                transitionAppear: boolean;
                closeOnClickOverlay: boolean;
                transition: string;
                closeOnPopstate: boolean;
                allowHtml: boolean;
                showCancelButton: boolean;
                cancelButtonDisabled: boolean;
                confirmButtonDisabled: boolean;
                showConfirmButton: boolean;
            }>>;
            alert: any;
            config: (options: import("vant").DialogOptions) => Promise<unknown>;
            close: () => void;
            setDefaultOptions: (options: import("vant").DialogOptions) => void;
            resetDefaultOptions: () => void;
            install(app: App<any>): void;
        };
        $toast: typeof Toast;
        $notify: {
            (options: import("packages/vant/lib/utils").Numeric | import("vant").NotifyOptions): import("packages/vant/lib/utils").ComponentInstance | undefined;
            clear: () => void;
            Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                type: {
                    type: import("vue").PropType<import("vant").NotifyType>;
                    default: import("vant").NotifyType;
                };
                color: StringConstructor;
                message: (NumberConstructor | StringConstructor)[];
                position: {
                    type: import("vue").PropType<import("packages/vant/lib/notify/types").NotifyPosition>;
                    default: import("packages/vant/lib/notify/types").NotifyPosition;
                };
                className: import("vue").PropType<unknown>;
                background: StringConstructor;
                lockScroll: BooleanConstructor;
            }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:show"[], "update:show", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                type: {
                    type: import("vue").PropType<import("vant").NotifyType>;
                    default: import("vant").NotifyType;
                };
                color: StringConstructor;
                message: (NumberConstructor | StringConstructor)[];
                position: {
                    type: import("vue").PropType<import("packages/vant/lib/notify/types").NotifyPosition>;
                    default: import("packages/vant/lib/notify/types").NotifyPosition;
                };
                className: import("vue").PropType<unknown>;
                background: StringConstructor;
                lockScroll: BooleanConstructor;
            }>> & {
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            }, {
                type: import("vant").NotifyType;
                position: import("packages/vant/lib/notify/types").NotifyPosition;
                overlay: boolean;
                show: boolean;
                lockScroll: boolean;
                lazyRender: boolean;
                transitionAppear: boolean;
                closeOnClickOverlay: boolean;
            }>>;
            setDefaultOptions: (options: import("vant").NotifyOptions) => import("vant").NotifyOptions;
            resetDefaultOptions: () => void;
            install(app: App<any>): void;
        };
        clear: () => void;
    };
    success(options: string | import("vant").ToastOptions): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            message: import("packages/vant/lib/utils").Numeric;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
        message: import("packages/vant/lib/utils").Numeric;
        close: () => void;
        open: (props: Record<string, any>) => void;
        $route: import("vue-router").RouteLocationNormalizedLoaded;
        $router: import("vue-router").Router;
        $Lazyload: {
            $on: (event: string, handler: import("packages/vant/lib/lazyload/vue-lazyload").Callback) => void;
            $off: (event: string, handler?: import("packages/vant/lib/lazyload/vue-lazyload").Callback | undefined) => void;
            $once: (event: string, handler: import("packages/vant/lib/lazyload/vue-lazyload").Callback) => void;
        };
        $dialog: {
            (options: import("vant").DialogOptions): Promise<unknown>;
            Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                title: StringConstructor;
                theme: import("vue").PropType<import("vant").DialogTheme>;
                width: (NumberConstructor | StringConstructor)[];
                message: import("vue").PropType<import("vant").DialogMessage>;
                callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
                allowHtml: BooleanConstructor;
                className: import("vue").PropType<unknown>;
                transition: {
                    type: import("vue").PropType<string>;
                    default: string;
                };
                messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
                closeOnPopstate: {
                    type: BooleanConstructor;
                    default: true;
                };
                showCancelButton: BooleanConstructor;
                cancelButtonText: StringConstructor;
                cancelButtonColor: StringConstructor;
                cancelButtonDisabled: BooleanConstructor;
                confirmButtonText: StringConstructor;
                confirmButtonColor: StringConstructor;
                confirmButtonDisabled: BooleanConstructor;
                showConfirmButton: {
                    type: BooleanConstructor;
                    default: true;
                };
                closeOnClickOverlay: BooleanConstructor;
            }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("keydown" | "update:show" | "cancel" | "confirm")[], "keydown" | "update:show" | "cancel" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                title: StringConstructor;
                theme: import("vue").PropType<import("vant").DialogTheme>;
                width: (NumberConstructor | StringConstructor)[];
                message: import("vue").PropType<import("vant").DialogMessage>;
                callback: import("vue").PropType<(action?: import("packages/vant/lib/dialog/types").DialogAction | undefined) => void>;
                allowHtml: BooleanConstructor;
                className: import("vue").PropType<unknown>;
                transition: {
                    type: import("vue").PropType<string>;
                    default: string;
                };
                messageAlign: import("vue").PropType<import("vant").DialogMessageAlign>;
                closeOnPopstate: {
                    type: BooleanConstructor;
                    default: true;
                };
                showCancelButton: BooleanConstructor;
                cancelButtonText: StringConstructor;
                cancelButtonColor: StringConstructor;
                cancelButtonDisabled: BooleanConstructor;
                confirmButtonText: StringConstructor;
                confirmButtonColor: StringConstructor;
                confirmButtonDisabled: BooleanConstructor;
                showConfirmButton: {
                    type: BooleanConstructor;
                    default: true;
                };
                closeOnClickOverlay: BooleanConstructor;
            }>> & {
                onKeydown?: ((...args: any[]) => any) | undefined;
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
                onCancel?: ((...args: any[]) => any) | undefined;
                onConfirm?: ((...args: any[]) => any) | undefined;
            }, {
                overlay: boolean;
                show: boolean;
                lockScroll: boolean;
                lazyRender: boolean;
                transitionAppear: boolean;
                closeOnClickOverlay: boolean;
                transition: string;
                closeOnPopstate: boolean;
                allowHtml: boolean;
                showCancelButton: boolean;
                cancelButtonDisabled: boolean;
                confirmButtonDisabled: boolean;
                showConfirmButton: boolean;
            }>>;
            alert: any;
            config: (options: import("vant").DialogOptions) => Promise<unknown>;
            close: () => void;
            setDefaultOptions: (options: import("vant").DialogOptions) => void;
            resetDefaultOptions: () => void;
            install(app: App<any>): void;
        };
        $toast: typeof Toast;
        $notify: {
            (options: import("packages/vant/lib/utils").Numeric | import("vant").NotifyOptions): import("packages/vant/lib/utils").ComponentInstance | undefined;
            clear: () => void;
            Component: import("packages/vant/lib/utils").WithInstall<import("vue").DefineComponent<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                type: {
                    type: import("vue").PropType<import("vant").NotifyType>;
                    default: import("vant").NotifyType;
                };
                color: StringConstructor;
                message: (NumberConstructor | StringConstructor)[];
                position: {
                    type: import("vue").PropType<import("packages/vant/lib/notify/types").NotifyPosition>;
                    default: import("packages/vant/lib/notify/types").NotifyPosition;
                };
                className: import("vue").PropType<unknown>;
                background: StringConstructor;
                lockScroll: BooleanConstructor;
            }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "update:show"[], "update:show", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
                show: BooleanConstructor;
                zIndex: (NumberConstructor | StringConstructor)[];
                overlay: {
                    type: BooleanConstructor;
                    default: true;
                };
                duration: (NumberConstructor | StringConstructor)[];
                teleport: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                lockScroll: {
                    type: BooleanConstructor;
                    default: true;
                };
                lazyRender: {
                    type: BooleanConstructor;
                    default: true;
                };
                beforeClose: import("vue").PropType<import("packages/vant/lib/utils").Interceptor>;
                overlayStyle: import("vue").PropType<import("vue").CSSProperties>;
                overlayClass: import("vue").PropType<unknown>;
                transitionAppear: BooleanConstructor;
                closeOnClickOverlay: {
                    type: BooleanConstructor;
                    default: true;
                };
            } & {
                type: {
                    type: import("vue").PropType<import("vant").NotifyType>;
                    default: import("vant").NotifyType;
                };
                color: StringConstructor;
                message: (NumberConstructor | StringConstructor)[];
                position: {
                    type: import("vue").PropType<import("packages/vant/lib/notify/types").NotifyPosition>;
                    default: import("packages/vant/lib/notify/types").NotifyPosition;
                };
                className: import("vue").PropType<unknown>;
                background: StringConstructor;
                lockScroll: BooleanConstructor;
            }>> & {
                "onUpdate:show"?: ((...args: any[]) => any) | undefined;
            }, {
                type: import("vant").NotifyType;
                position: import("packages/vant/lib/notify/types").NotifyPosition;
                overlay: boolean;
                show: boolean;
                lockScroll: boolean;
                lazyRender: boolean;
                transitionAppear: boolean;
                closeOnClickOverlay: boolean;
            }>>;
            setDefaultOptions: (options: import("vant").NotifyOptions) => import("vant").NotifyOptions;
            resetDefaultOptions: () => void;
            install(app: App<any>): void;
        };
        clear: () => void;
    };
    clear: (all?: boolean | undefined) => void;
    allowMultiple: (value?: boolean | undefined) => void;
    setDefaultOptions: typeof setToastDefaultOptions;
    resetDefaultOptions: (type?: import("vant").ToastType | undefined) => void;
    install(app: App): void;
};
declare module '@vue/runtime-core' {
    interface ComponentCustomProperties {
        $toast: typeof Toast;
    }
}
