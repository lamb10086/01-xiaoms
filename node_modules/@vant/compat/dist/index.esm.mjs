var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/toast.ts
import {
  showToast,
  closeToast,
  showFailToast,
  showSuccessToast,
  allowMultipleToast,
  setToastDefaultOptions,
  resetToastDefaultOptions
} from "vant";
var Toast = (...args) => {
  const toast = showToast(...args);
  return __spreadValues({
    clear: toast.close
  }, toast);
};
Toast.fail = (...args) => {
  const toast = showFailToast(...args);
  return __spreadValues({
    clear: toast.close
  }, toast);
};
Toast.success = (...args) => {
  const toast = showSuccessToast(...args);
  return __spreadValues({
    clear: toast.close
  }, toast);
};
Toast.clear = closeToast;
Toast.allowMultiple = allowMultipleToast;
Toast.setDefaultOptions = setToastDefaultOptions;
Toast.resetDefaultOptions = resetToastDefaultOptions;
Toast.install = (app) => {
  app.config.globalProperties.$toast = Toast;
};

// src/notify.ts
import {
  Notify as VanNotify,
  showNotify,
  closeNotify,
  setNotifyDefaultOptions,
  resetNotifyDefaultOptions
} from "vant";
var Notify = (...args) => showNotify(...args);
Notify.clear = closeNotify;
Notify.Component = VanNotify;
Notify.setDefaultOptions = setNotifyDefaultOptions;
Notify.resetDefaultOptions = resetNotifyDefaultOptions;
Notify.install = (app) => {
  app.use(Notify.Component);
  app.config.globalProperties.$notify = Notify;
};

// src/dialog.ts
import {
  Dialog as VanDialog,
  showDialog,
  closeDialog,
  showConfirmDialog,
  setDialogDefaultOptions,
  resetDialogDefaultOptions
} from "vant";
var Dialog = (...args) => showDialog(...args);
Dialog.Component = VanDialog;
Dialog.alert = Dialog;
Dialog.config = showConfirmDialog;
Dialog.close = closeDialog;
Dialog.setDefaultOptions = setDialogDefaultOptions;
Dialog.resetDefaultOptions = resetDialogDefaultOptions;
Dialog.install = (app) => {
  app.use(Dialog.Component);
  app.config.globalProperties.$dialog = Dialog;
};

// src/image-preview.ts
import { ImagePreview as VanImagePreview, showImagePreview } from "vant";
var ImagePreview = (...args) => showImagePreview(...args);
ImagePreview.Component = VanImagePreview;
ImagePreview.install = (app) => {
  app.use(ImagePreview.Component);
};
export {
  Dialog,
  ImagePreview,
  Notify,
  Toast
};
