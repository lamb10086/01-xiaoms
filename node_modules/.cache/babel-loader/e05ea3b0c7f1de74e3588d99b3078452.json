{"ast":null,"code":"import axios from \"axios\";\n// import { Toast } from \"vant\";\nconst instance = axios.create({\n  //一般就是  项目的域名\n  // baseURL: \"https://api.tf2sc.cn\",\n  baseURL: \"/local\",\n  // baseURL: \"https://mall.api.epet.com\",\n  //0表示无超时时间   如果请求在时间内还没有完成将被中断\n  timeout: 5000\n});\ninstance.interceptors.request.use(function (config) {\n  // console.log(\"config:\", config);\n  // Toast.loading({\n  //   message: \"加载中...\",\n  //   forbidClick: false,\n  //   overlay: true,\n  // });\n  console.log(config);\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// ************** 对响应数据做点什么  代码里还没能得到数据\n// 添加响应拦截器\ninstance.interceptors.response.use(function (response) {\n  // Toast.clear();\n  // 对响应数据做点什么\n  //因为    axios对服务器返回的数据做了处理\n  //比如     已经把服务器返回的json字符串转为json对象\n  //比如   服务器返回的数据外面包了一层\n  //因为axios为自动为服务器数据包裹一层\n  return response.data;\n}, function (error) {\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\n\n//默认导出\nexport default instance;","map":{"version":3,"names":["axios","instance","create","baseURL","timeout","interceptors","request","use","config","console","log","error","Promise","reject","response","data"],"sources":["C:/Users/yangp/Desktop/01-xiaoms/src/util/local.js"],"sourcesContent":["import axios from \"axios\";\r\n// import { Toast } from \"vant\";\r\nconst instance = axios.create({\r\n  //一般就是  项目的域名\r\n  // baseURL: \"https://api.tf2sc.cn\",\r\n  baseURL: \"/local\",\r\n  // baseURL: \"https://mall.api.epet.com\",\r\n  //0表示无超时时间   如果请求在时间内还没有完成将被中断\r\n  timeout: 5000,\r\n});\r\ninstance.interceptors.request.use(\r\n  function (config) {\r\n    // console.log(\"config:\", config);\r\n    // Toast.loading({\r\n    //   message: \"加载中...\",\r\n    //   forbidClick: false,\r\n    //   overlay: true,\r\n    // });\r\n    console.log(config);\r\n\r\n    return config;\r\n  },\r\n  function (error) {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// ************** 对响应数据做点什么  代码里还没能得到数据\r\n// 添加响应拦截器\r\ninstance.interceptors.response.use(\r\n  function (response) {\r\n    // Toast.clear();\r\n    // 对响应数据做点什么\r\n    //因为    axios对服务器返回的数据做了处理\r\n    //比如     已经把服务器返回的json字符串转为json对象\r\n    //比如   服务器返回的数据外面包了一层\r\n    //因为axios为自动为服务器数据包裹一层\r\n    return response.data;\r\n  },\r\n  function (error) {\r\n    // 对响应错误做点什么\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n//默认导出\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5B;EACA;EACAC,OAAO,EAAE,QAAQ;EACjB;EACA;EACAC,OAAO,EAAE;AACX,CAAC,CAAC;AACFH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/B,UAAUC,MAAM,EAAE;EAChB;EACA;EACA;EACA;EACA;EACA;EACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EAEnB,OAAOA,MAAM;AACf,CAAC,EACD,UAAUG,KAAK,EAAE;EACf;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;;AAED;AACA;AACAV,QAAQ,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAChC,UAAUO,QAAQ,EAAE;EAClB;EACA;EACA;EACA;EACA;EACA;EACA,OAAOA,QAAQ,CAACC,IAAI;AACtB,CAAC,EACD,UAAUJ,KAAK,EAAE;EACf;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CACF;;AAED;AACA,eAAeV,QAAQ"},"metadata":{},"sourceType":"module"}