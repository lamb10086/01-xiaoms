{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n(0, _utils.default)(\"ArgumentPlaceholder\", {});\n(0, _utils.default)(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING ? {\n    object: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    },\n    callee: {\n      validate: Object.assign(() => {}, {\n        oneOfNodeTypes: [\"Expression\"]\n      })\n    }\n  } : {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    },\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\", \"StringLiteral\")\n    },\n    value: {\n      validate: (0, _utils.assertNodeType)(\"StringLiteral\")\n    }\n  }\n});\n(0, _utils.default)(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\n(0, _utils.default)(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"BlockStatement\")\n    },\n    async: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    }\n  }\n});\n(0, _utils.default)(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: (0, _utils.assertNodeType)(\"Identifier\")\n    }\n  }\n});\n(0, _utils.default)(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"ObjectProperty\", \"SpreadElement\")))\n    }\n  }\n});\n(0, _utils.default)(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"Expression\", \"SpreadElement\"))),\n      default: []\n    }\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"]\n});\n(0, _utils.default)(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: (0, _utils.assertNodeType)(\"Program\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"TopicReference\", {\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  },\n  aliases: [\"Expression\"]\n});\n(0, _utils.default)(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"]\n});","map":{"version":3,"mappings":"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","names":["visitor","aliases","fields","process","env","BABEL_TYPES_8_BREAKING","object","validate","Object","assign","oneOfNodeTypes","callee","key","value","expression","builder","body","async","default","exported","properties","elements"],"sources":["../../src/definitions/experimental.ts"],"sourcesContent":["import defineType, {\n  assertEach,\n  assertNodeType,\n  assertValueType,\n  chain,\n} from \"./utils\";\n\ndefineType(\"ArgumentPlaceholder\", {});\n\ndefineType(\"BindExpression\", {\n  visitor: [\"object\", \"callee\"],\n  aliases: [\"Expression\"],\n  fields: !process.env.BABEL_TYPES_8_BREAKING\n    ? {\n        object: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n        callee: {\n          validate: Object.assign(() => {}, {\n            oneOfNodeTypes: [\"Expression\"],\n          }),\n        },\n      }\n    : {\n        object: {\n          validate: assertNodeType(\"Expression\"),\n        },\n        callee: {\n          validate: assertNodeType(\"Expression\"),\n        },\n      },\n});\n\ndefineType(\"ImportAttribute\", {\n  visitor: [\"key\", \"value\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    value: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n  },\n});\n\ndefineType(\"Decorator\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"DoExpression\", {\n  visitor: [\"body\"],\n  builder: [\"body\", \"async\"],\n  aliases: [\"Expression\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    async: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ExportDefaultSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"RecordExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ObjectProperty\", \"SpreadElement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TupleExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\", \"SpreadElement\")),\n      ),\n      default: [],\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"DecimalLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\n// https://github.com/tc39/proposal-js-module-blocks\ndefineType(\"ModuleExpression\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: assertNodeType(\"Program\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-hack-pipes\ndefineType(\"TopicReference\", {\n  aliases: [\"Expression\"],\n});\n\n// https://github.com/tc39/proposal-pipeline-operator\n// https://github.com/js-choi/proposal-smart-pipes\ndefineType(\"PipelineTopicExpression\", {\n  builder: [\"expression\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelineBareFunction\", {\n  builder: [\"callee\"],\n  visitor: [\"callee\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"PipelinePrimaryTopicReference\", {\n  aliases: [\"Expression\"],\n});\n"]},"metadata":{},"sourceType":"module"}