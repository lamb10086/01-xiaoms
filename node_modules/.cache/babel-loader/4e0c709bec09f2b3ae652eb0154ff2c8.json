{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.assertEach = assertEach;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertNodeType = assertNodeType;\nexports.assertOneOf = assertOneOf;\nexports.assertOptionalChainStart = assertOptionalChainStart;\nexports.assertShape = assertShape;\nexports.assertValueType = assertValueType;\nexports.chain = chain;\nexports.default = defineType;\nexports.defineAliasedType = defineAliasedType;\nexports.typeIs = typeIs;\nexports.validate = validate;\nexports.validateArrayOfType = validateArrayOfType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.validateType = validateType;\nvar _is = require(\"../validators/is\");\nvar _validate = require(\"../validators/validate\");\nconst VISITOR_KEYS = {};\nexports.VISITOR_KEYS = VISITOR_KEYS;\nconst ALIAS_KEYS = {};\nexports.ALIAS_KEYS = ALIAS_KEYS;\nconst FLIPPED_ALIAS_KEYS = {};\nexports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\nconst NODE_FIELDS = {};\nexports.NODE_FIELDS = NODE_FIELDS;\nconst BUILDER_KEYS = {};\nexports.BUILDER_KEYS = BUILDER_KEYS;\nconst DEPRECATED_KEYS = {};\nexports.DEPRECATED_KEYS = DEPRECATED_KEYS;\nconst NODE_PARENT_VALIDATIONS = {};\nexports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\nfunction typeIs(typeName) {\n  return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType(...typeName);\n}\nfunction validateType(typeName) {\n  return validate(typeIs(typeName));\n}\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\nfunction validateOptionalType(typeName) {\n  return {\n    validate: typeIs(typeName),\n    optional: true\n  };\n}\nfunction arrayOf(elementType) {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\nfunction arrayOfType(typeName) {\n  return arrayOf(typeIs(typeName));\n}\nfunction validateArrayOfType(typeName) {\n  return validate(arrayOfType(typeName));\n}\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\nfunction assertOneOf(...values) {\n  function validate(node, key, val) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n  validate.oneOf = values;\n  return validate;\n}\nfunction assertNodeType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\nfunction assertNodeOrValueType(...types) {\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n  validate.type = type;\n  return validate;\n}\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join(\"\\n\")}`);\n    }\n  }\n  validate.shapeOf = shape;\n  return validate;\n}\nfunction assertOptionalChainStart() {\n  function validate(node) {\n    var _current;\n    let current = node;\n    while (node) {\n      const {\n        type\n      } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n      break;\n    }\n    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);\n  }\n  return validate;\n}\nfunction chain(...fns) {\n  function validate(...args) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n  if (fns.length >= 2 && \"type\" in fns[0] && fns[0].type === \"array\" && !(\"each\" in fns[1])) {\n    throw new Error(`An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`);\n  }\n  return validate;\n}\nconst validTypeOpts = [\"aliases\", \"builder\", \"deprecatedAlias\", \"fields\", \"inherits\", \"visitor\", \"validate\"];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\nfunction defineAliasedType(...aliases) {\n  return (type, opts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      var _store$opts$inherits$, _defined;\n      if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();\n      (_defined = defined) != null ? _defined : defined = [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    return defineType(type, opts);\n  };\n}\nfunction defineType(type, opts = {}) {\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\") {\n          throw new Error(\"field defaults can only be primitives or empty arrays currently\");\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate\n        };\n      }\n    }\n  }\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n  store[type] = opts;\n}\nconst store = {};","map":{"version":3,"mappings":"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","names":["VISITOR_KEYS","ALIAS_KEYS","FLIPPED_ALIAS_KEYS","NODE_FIELDS","BUILDER_KEYS","DEPRECATED_KEYS","NODE_PARENT_VALIDATIONS","getType","val","Array","isArray","validate","typeIs","typeName","assertNodeType","validateType","validateOptional","optional","validateOptionalType","arrayOf","elementType","chain","assertValueType","assertEach","arrayOfType","validateArrayOfType","callback","validator","node","key","i","length","subkey","v","process","env","BABEL_TYPES_8_BREAKING","each","assertOneOf","values","indexOf","TypeError","JSON","stringify","oneOf","types","type","oneOfNodeTypes","assertNodeOrValueType","oneOfNodeOrValueTypes","valid","assertShape","shape","errors","property","Object","keys","error","push","message","join","shapeOf","assertOptionalChainStart","current","callee","object","_current","fns","args","fn","chainOf","Error","validTypeOpts","validFieldKeys","defineAliasedType","aliases","opts","defined","inherits","store","_store$opts$inherits$","slice","additional","filter","a","includes","unshift","defineType","fields","getOwnPropertyNames","field","def","default","visitor","builder","k","deprecatedAlias","concat","undefined","forEach","alias"],"sources":["../../src/definitions/utils.ts"],"sourcesContent":["import is from \"../validators/is\";\nimport { validateField, validateChild } from \"../validators/validate\";\nimport type * as t from \"..\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    return defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n\nconst store = {} as Record<string, DefineTypeOpts>;\n"]},"metadata":{},"sourceType":"module"}