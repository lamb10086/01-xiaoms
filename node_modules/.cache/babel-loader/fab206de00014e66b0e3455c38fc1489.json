{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\nvar _generated = require(\"../validators/generated\");\nvar _cloneNode = require(\"../clone/cloneNode\");\nvar _removePropertiesDeep = require(\"../modifications/removePropertiesDeep\");\nfunction toKeyAlias(node, key = node.key) {\n  let alias;\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _generated.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _generated.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n  return alias;\n}\ntoKeyAlias.uid = 0;\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAGe,SAASA,UAAT,CACbC,IADa,EAEbC,GAAW,GAAGD,IAAI,CAACC,GAFN,EAGL;EACR,IAAIC,KAAJ;EAGA,IAAIF,IAAI,CAACG,IAAL,KAAc,QAAlB,EAA4B;IAC1B,OAAOJ,UAAU,CAACK,SAAX,KAAyB,EAAhC;EACD,CAFD,MAEO,IAAI,6BAAaH,GAAb,CAAJ,EAAuB;IAC5BC,KAAK,GAAGD,GAAG,CAACI,IAAZ;EACD,CAFM,MAEA,IAAI,gCAAgBJ,GAAhB,CAAJ,EAA0B;IAC/BC,KAAK,GAAGI,IAAI,CAACC,SAAL,CAAeN,GAAG,CAACO,KAAnB,CAAR;EACD,CAFM,MAEA;IACLN,KAAK,GAAGI,IAAI,CAACC,SAAL,CAAe,mCAAqB,wBAAUN,GAAV,CAArB,CAAf,CAAR;EACD;EAGD,IAAID,IAAI,CAACS,QAAT,EAAmB;IACjBP,KAAK,GAAI,IAAGA,KAAM,GAAlB;EACD;EAGD,IAAIF,IAAI,CAACU,MAAT,EAAiB;IACfR,KAAK,GAAI,UAASA,KAAM,EAAxB;EACD;EAED,OAAOA,KAAP;AACD;AAEDH,UAAU,CAACY,GAAX,GAAiB,CAAjB;AAEAZ,UAAU,CAACK,SAAX,GAAuB,YAAY;EACjC,IAAIL,UAAU,CAACY,GAAX,IAAkBC,MAAM,CAACC,gBAA7B,EAA+C;IAC7C,OAAQd,UAAU,CAACY,GAAX,GAAiB,CAAzB;EACD,CAFD,MAEO;IACL,OAAOZ,UAAU,CAACY,GAAX,EAAP;EACD;AACF,CAND","names":["toKeyAlias","node","key","alias","kind","increment","name","JSON","stringify","value","computed","static","uid","Number","MAX_SAFE_INTEGER"],"sources":["../../src/converters/toKeyAlias.ts"],"sourcesContent":["import { isIdentifier, isStringLiteral } from \"../validators/generated\";\nimport cloneNode from \"../clone/cloneNode\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep\";\nimport type * as t from \"..\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}