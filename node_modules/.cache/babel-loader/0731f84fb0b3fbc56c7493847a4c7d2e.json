{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isValidIdentifier = require(\"../validators/isValidIdentifier\");\nvar _generated = require(\"../builders/generated\");\nvar _default = valueToNode;\nexports.default = _default;\nconst objectToString = Function.call.bind(Object.prototype.toString);\nfunction isRegExp(value) {\n  return objectToString(value) === \"[object RegExp]\";\n}\nfunction isPlainObject(value) {\n  if (typeof value !== \"object\" || value === null || Object.prototype.toString.call(value) !== \"[object Object]\") {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\nfunction valueToNode(value) {\n  if (value === undefined) {\n    return (0, _generated.identifier)(\"undefined\");\n  }\n  if (value === true || value === false) {\n    return (0, _generated.booleanLiteral)(value);\n  }\n  if (value === null) {\n    return (0, _generated.nullLiteral)();\n  }\n  if (typeof value === \"string\") {\n    return (0, _generated.stringLiteral)(value);\n  }\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = (0, _generated.numericLiteral)(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        numerator = (0, _generated.numericLiteral)(0);\n      } else {\n        numerator = (0, _generated.numericLiteral)(1);\n      }\n      result = (0, _generated.binaryExpression)(\"/\", numerator, (0, _generated.numericLiteral)(0));\n    }\n    if (value < 0 || Object.is(value, -0)) {\n      result = (0, _generated.unaryExpression)(\"-\", result);\n    }\n    return result;\n  }\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return (0, _generated.regExpLiteral)(pattern, flags);\n  }\n  if (Array.isArray(value)) {\n    return (0, _generated.arrayExpression)(value.map(valueToNode));\n  }\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if ((0, _isValidIdentifier.default)(key)) {\n        nodeKey = (0, _generated.identifier)(key);\n      } else {\n        nodeKey = (0, _generated.stringLiteral)(key);\n      }\n      props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));\n    }\n    return (0, _generated.objectExpression)(props);\n  }\n  throw new Error(\"don't know how to turn this value into a node\");\n}","map":{"version":3,"mappings":"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","names":["valueToNode","objectToString","Function","call","bind","Object","prototype","toString","isRegExp","value","isPlainObject","proto","getPrototypeOf","undefined","result","Number","isFinite","Math","abs","numerator","isNaN","is","pattern","source","flags","match","Array","isArray","map","props","key","keys","nodeKey","push","Error"],"sources":["../../src/converters/valueToNode.ts"],"sourcesContent":["import isValidIdentifier from \"../validators/isValidIdentifier\";\nimport {\n  identifier,\n  booleanLiteral,\n  nullLiteral,\n  stringLiteral,\n  numericLiteral,\n  regExpLiteral,\n  arrayExpression,\n  objectProperty,\n  objectExpression,\n  unaryExpression,\n  binaryExpression,\n} from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default valueToNode as {\n  (value: undefined): t.Identifier; // TODO: This should return \"void 0\"\n  (value: boolean): t.BooleanLiteral;\n  (value: null): t.NullLiteral;\n  (value: string): t.StringLiteral;\n  // Infinities and NaN need to use a BinaryExpression; negative values must be wrapped in UnaryExpression\n  (value: number): t.NumericLiteral | t.BinaryExpression | t.UnaryExpression;\n  (value: RegExp): t.RegExpLiteral;\n  (value: ReadonlyArray<unknown>): t.ArrayExpression;\n\n  // this throws with objects that are not plain objects,\n  // or if there are non-valueToNode-able values\n  (value: object): t.ObjectExpression;\n\n  (value: unknown): t.Expression;\n};\n\n// @ts-expect-error: Object.prototype.toString must return a string\nconst objectToString: (value: unknown) => string = Function.call.bind(\n  Object.prototype.toString,\n);\n\nfunction isRegExp(value: unknown): value is RegExp {\n  return objectToString(value) === \"[object RegExp]\";\n}\n\nfunction isPlainObject(value: unknown): value is object {\n  if (\n    typeof value !== \"object\" ||\n    value === null ||\n    Object.prototype.toString.call(value) !== \"[object Object]\"\n  ) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(value);\n  // Object.prototype's __proto__ is null. Every other class's __proto__.__proto__ is\n  // not null by default. We cannot check if proto === Object.prototype because it\n  // could come from another realm.\n  return proto === null || Object.getPrototypeOf(proto) === null;\n}\n\nfunction valueToNode(value: unknown): t.Expression {\n  // undefined\n  if (value === undefined) {\n    return identifier(\"undefined\");\n  }\n\n  // boolean\n  if (value === true || value === false) {\n    return booleanLiteral(value);\n  }\n\n  // null\n  if (value === null) {\n    return nullLiteral();\n  }\n\n  // strings\n  if (typeof value === \"string\") {\n    return stringLiteral(value);\n  }\n\n  // numbers\n  if (typeof value === \"number\") {\n    let result;\n    if (Number.isFinite(value)) {\n      result = numericLiteral(Math.abs(value));\n    } else {\n      let numerator;\n      if (Number.isNaN(value)) {\n        // NaN\n        numerator = numericLiteral(0);\n      } else {\n        // Infinity / -Infinity\n        numerator = numericLiteral(1);\n      }\n\n      result = binaryExpression(\"/\", numerator, numericLiteral(0));\n    }\n\n    if (value < 0 || Object.is(value, -0)) {\n      result = unaryExpression(\"-\", result);\n    }\n\n    return result;\n  }\n\n  // regexes\n  if (isRegExp(value)) {\n    const pattern = value.source;\n    const flags = value.toString().match(/\\/([a-z]+|)$/)[1];\n    return regExpLiteral(pattern, flags);\n  }\n\n  // array\n  if (Array.isArray(value)) {\n    return arrayExpression(value.map(valueToNode));\n  }\n\n  // object\n  if (isPlainObject(value)) {\n    const props = [];\n    for (const key of Object.keys(value)) {\n      let nodeKey;\n      if (isValidIdentifier(key)) {\n        nodeKey = identifier(key);\n      } else {\n        nodeKey = stringLiteral(key);\n      }\n      props.push(\n        objectProperty(\n          nodeKey,\n          valueToNode(\n            // @ts-expect-error key must present in value\n            value[key],\n          ),\n        ),\n      );\n    }\n    return objectExpression(props);\n  }\n\n  throw new Error(\"don't know how to turn this value into a node\");\n}\n"]},"metadata":{},"sourceType":"module"}