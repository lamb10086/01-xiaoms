{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\nconst defineType = (0, _utils.defineAliasedType)(\"JSX\");\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXElement\", \"JSXFragment\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    }\n  }\n});\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: Object.assign({\n    openingElement: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }, {\n    selfClosing: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"JSXEmptyExpression\", {});\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"JSXEmptyExpression\")\n    }\n  }\n});\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningFragment\")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXClosingFragment\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }\n});\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"]\n});\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"]\n});","map":{"version":3,"mappings":"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","names":["defineType","visitor","aliases","fields","name","validate","value","optional","builder","openingElement","closingElement","children","selfClosing","expression","object","property","namespace","default","attributes","typeParameters","argument","openingFragment","closingFragment"],"sources":["../../src/definitions/jsx.ts"],"sourcesContent":["import {\n  defineAliasedType,\n  assertNodeType,\n  assertValueType,\n  chain,\n  assertEach,\n} from \"./utils\";\n\nconst defineType = defineAliasedType(\"JSX\");\n\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\", \"JSXNamespacedName\"),\n    },\n    value: {\n      optional: true,\n      validate: assertNodeType(\n        \"JSXElement\",\n        \"JSXFragment\",\n        \"StringLiteral\",\n        \"JSXExpressionContainer\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXElement\", {\n  builder: process.env.BABEL_8_BREAKING\n    ? [\"openingElement\", \"closingElement\", \"children\"]\n    : [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingElement: {\n      validate: assertNodeType(\"JSXOpeningElement\"),\n    },\n    closingElement: {\n      optional: true,\n      validate: assertNodeType(\"JSXClosingElement\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n    ...(process.env.BABEL_8_BREAKING\n      ? {}\n      : {\n          selfClosing: {\n            validate: assertValueType(\"boolean\"),\n            optional: true,\n          },\n        }),\n  },\n});\n\ndefineType(\"JSXEmptyExpression\", {});\n\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\", \"JSXEmptyExpression\"),\n    },\n  },\n});\n\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"JSXMemberExpression\", \"JSXIdentifier\"),\n    },\n    property: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n    name: {\n      validate: assertNodeType(\"JSXIdentifier\"),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: assertNodeType(\n        \"JSXIdentifier\",\n        \"JSXMemberExpression\",\n        \"JSXNamespacedName\",\n      ),\n    },\n    selfClosing: {\n      default: false,\n    },\n    attributes: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"JSXAttribute\", \"JSXSpreadAttribute\")),\n      ),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: assertNodeType(\"JSXOpeningFragment\"),\n    },\n    closingFragment: {\n      validate: assertNodeType(\"JSXClosingFragment\"),\n    },\n    children: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"JSXText\",\n            \"JSXExpressionContainer\",\n            \"JSXSpreadChild\",\n            \"JSXElement\",\n            \"JSXFragment\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"],\n});\n\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"],\n});\n"]},"metadata":{},"sourceType":"module"}