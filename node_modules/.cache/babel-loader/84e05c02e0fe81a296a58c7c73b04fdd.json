{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toComputedKey;\nvar _generated = require(\"../validators/generated\");\nvar _generated2 = require(\"../builders/generated\");\nfunction toComputedKey(node, key = node.key || node.property) {\n  if (!node.computed && (0, _generated.isIdentifier)(key)) key = (0, _generated2.stringLiteral)(key.name);\n  return key;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAGe,SAASA,aAAT,CACbC,IADa,EAUbC,GAAiC,GAAGD,IAAI,CAACC,GAAL,IAAYD,IAAI,CAACE,QAVxC,EAWb;EACA,IAAI,CAACF,IAAI,CAACG,QAAN,IAAkB,6BAAaF,GAAb,CAAtB,EAAyCA,GAAG,GAAG,+BAAcA,GAAG,CAACG,IAAlB,CAAN;EAEzC,OAAOH,GAAP;AACD","names":["toComputedKey","node","key","property","computed","name"],"sources":["../../src/converters/toComputedKey.ts"],"sourcesContent":["import { isIdentifier } from \"../validators/generated\";\nimport { stringLiteral } from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default function toComputedKey(\n  node:\n    | t.ObjectMember\n    | t.ObjectProperty\n    | t.ClassMethod\n    | t.ClassProperty\n    | t.ClassAccessorProperty\n    | t.MemberExpression\n    | t.OptionalMemberExpression,\n  // @ts-expect-error todo(flow->ts): maybe check the type of node before accessing .key and .property\n  key: t.Expression | t.PrivateName = node.key || node.property,\n) {\n  if (!node.computed && isIdentifier(key)) key = stringLiteral(key.name);\n\n  return key;\n}\n"]},"metadata":{},"sourceType":"module"}